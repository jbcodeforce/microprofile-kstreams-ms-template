/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ibm.gse.eda.domain.events;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class VesselCourseEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7549236079738652L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VesselCourseEvent\",\"namespace\":\"ibm.gse.eda.domain.events\",\"fields\":[{\"name\":\"vessel_id\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"speed\",\"type\":\"int\"},{\"name\":\"bearing\",\"type\":\"int\"},{\"name\":\"longitude\",\"type\":\"string\"},{\"name\":\"lattitude\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<VesselCourseEvent> ENCODER =
      new BinaryMessageEncoder<VesselCourseEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<VesselCourseEvent> DECODER =
      new BinaryMessageDecoder<VesselCourseEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<VesselCourseEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<VesselCourseEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<VesselCourseEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<VesselCourseEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this VesselCourseEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a VesselCourseEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a VesselCourseEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static VesselCourseEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence vessel_id;
  @Deprecated public java.lang.CharSequence status;
  @Deprecated public int speed;
  @Deprecated public int bearing;
  @Deprecated public java.lang.CharSequence longitude;
  @Deprecated public java.lang.CharSequence lattitude;
  @Deprecated public int timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public VesselCourseEvent() {}

  /**
   * All-args constructor.
   * @param vessel_id The new value for vessel_id
   * @param status The new value for status
   * @param speed The new value for speed
   * @param bearing The new value for bearing
   * @param longitude The new value for longitude
   * @param lattitude The new value for lattitude
   * @param timestamp The new value for timestamp
   */
  public VesselCourseEvent(java.lang.CharSequence vessel_id, java.lang.CharSequence status, java.lang.Integer speed, java.lang.Integer bearing, java.lang.CharSequence longitude, java.lang.CharSequence lattitude, java.lang.Integer timestamp) {
    this.vessel_id = vessel_id;
    this.status = status;
    this.speed = speed;
    this.bearing = bearing;
    this.longitude = longitude;
    this.lattitude = lattitude;
    this.timestamp = timestamp;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return vessel_id;
    case 1: return status;
    case 2: return speed;
    case 3: return bearing;
    case 4: return longitude;
    case 5: return lattitude;
    case 6: return timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: vessel_id = (java.lang.CharSequence)value$; break;
    case 1: status = (java.lang.CharSequence)value$; break;
    case 2: speed = (java.lang.Integer)value$; break;
    case 3: bearing = (java.lang.Integer)value$; break;
    case 4: longitude = (java.lang.CharSequence)value$; break;
    case 5: lattitude = (java.lang.CharSequence)value$; break;
    case 6: timestamp = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'vessel_id' field.
   * @return The value of the 'vessel_id' field.
   */
  public java.lang.CharSequence getVesselId() {
    return vessel_id;
  }


  /**
   * Sets the value of the 'vessel_id' field.
   * @param value the value to set.
   */
  public void setVesselId(java.lang.CharSequence value) {
    this.vessel_id = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'speed' field.
   * @return The value of the 'speed' field.
   */
  public int getSpeed() {
    return speed;
  }


  /**
   * Sets the value of the 'speed' field.
   * @param value the value to set.
   */
  public void setSpeed(int value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'bearing' field.
   * @return The value of the 'bearing' field.
   */
  public int getBearing() {
    return bearing;
  }


  /**
   * Sets the value of the 'bearing' field.
   * @param value the value to set.
   */
  public void setBearing(int value) {
    this.bearing = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return The value of the 'longitude' field.
   */
  public java.lang.CharSequence getLongitude() {
    return longitude;
  }


  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(java.lang.CharSequence value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'lattitude' field.
   * @return The value of the 'lattitude' field.
   */
  public java.lang.CharSequence getLattitude() {
    return lattitude;
  }


  /**
   * Sets the value of the 'lattitude' field.
   * @param value the value to set.
   */
  public void setLattitude(java.lang.CharSequence value) {
    this.lattitude = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public int getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(int value) {
    this.timestamp = value;
  }

  /**
   * Creates a new VesselCourseEvent RecordBuilder.
   * @return A new VesselCourseEvent RecordBuilder
   */
  public static ibm.gse.eda.domain.events.VesselCourseEvent.Builder newBuilder() {
    return new ibm.gse.eda.domain.events.VesselCourseEvent.Builder();
  }

  /**
   * Creates a new VesselCourseEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new VesselCourseEvent RecordBuilder
   */
  public static ibm.gse.eda.domain.events.VesselCourseEvent.Builder newBuilder(ibm.gse.eda.domain.events.VesselCourseEvent.Builder other) {
    if (other == null) {
      return new ibm.gse.eda.domain.events.VesselCourseEvent.Builder();
    } else {
      return new ibm.gse.eda.domain.events.VesselCourseEvent.Builder(other);
    }
  }

  /**
   * Creates a new VesselCourseEvent RecordBuilder by copying an existing VesselCourseEvent instance.
   * @param other The existing instance to copy.
   * @return A new VesselCourseEvent RecordBuilder
   */
  public static ibm.gse.eda.domain.events.VesselCourseEvent.Builder newBuilder(ibm.gse.eda.domain.events.VesselCourseEvent other) {
    if (other == null) {
      return new ibm.gse.eda.domain.events.VesselCourseEvent.Builder();
    } else {
      return new ibm.gse.eda.domain.events.VesselCourseEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for VesselCourseEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VesselCourseEvent>
    implements org.apache.avro.data.RecordBuilder<VesselCourseEvent> {

    private java.lang.CharSequence vessel_id;
    private java.lang.CharSequence status;
    private int speed;
    private int bearing;
    private java.lang.CharSequence longitude;
    private java.lang.CharSequence lattitude;
    private int timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ibm.gse.eda.domain.events.VesselCourseEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.vessel_id)) {
        this.vessel_id = data().deepCopy(fields()[0].schema(), other.vessel_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.status)) {
        this.status = data().deepCopy(fields()[1].schema(), other.status);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.speed)) {
        this.speed = data().deepCopy(fields()[2].schema(), other.speed);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.bearing)) {
        this.bearing = data().deepCopy(fields()[3].schema(), other.bearing);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.longitude)) {
        this.longitude = data().deepCopy(fields()[4].schema(), other.longitude);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.lattitude)) {
        this.lattitude = data().deepCopy(fields()[5].schema(), other.lattitude);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[6].schema(), other.timestamp);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing VesselCourseEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(ibm.gse.eda.domain.events.VesselCourseEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.vessel_id)) {
        this.vessel_id = data().deepCopy(fields()[0].schema(), other.vessel_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.status)) {
        this.status = data().deepCopy(fields()[1].schema(), other.status);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.speed)) {
        this.speed = data().deepCopy(fields()[2].schema(), other.speed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.bearing)) {
        this.bearing = data().deepCopy(fields()[3].schema(), other.bearing);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.longitude)) {
        this.longitude = data().deepCopy(fields()[4].schema(), other.longitude);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lattitude)) {
        this.lattitude = data().deepCopy(fields()[5].schema(), other.lattitude);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[6].schema(), other.timestamp);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'vessel_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getVesselId() {
      return vessel_id;
    }


    /**
      * Sets the value of the 'vessel_id' field.
      * @param value The value of 'vessel_id'.
      * @return This builder.
      */
    public ibm.gse.eda.domain.events.VesselCourseEvent.Builder setVesselId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.vessel_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'vessel_id' field has been set.
      * @return True if the 'vessel_id' field has been set, false otherwise.
      */
    public boolean hasVesselId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'vessel_id' field.
      * @return This builder.
      */
    public ibm.gse.eda.domain.events.VesselCourseEvent.Builder clearVesselId() {
      vessel_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public ibm.gse.eda.domain.events.VesselCourseEvent.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.status = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public ibm.gse.eda.domain.events.VesselCourseEvent.Builder clearStatus() {
      status = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'speed' field.
      * @return The value.
      */
    public int getSpeed() {
      return speed;
    }


    /**
      * Sets the value of the 'speed' field.
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public ibm.gse.eda.domain.events.VesselCourseEvent.Builder setSpeed(int value) {
      validate(fields()[2], value);
      this.speed = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'speed' field has been set.
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'speed' field.
      * @return This builder.
      */
    public ibm.gse.eda.domain.events.VesselCourseEvent.Builder clearSpeed() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'bearing' field.
      * @return The value.
      */
    public int getBearing() {
      return bearing;
    }


    /**
      * Sets the value of the 'bearing' field.
      * @param value The value of 'bearing'.
      * @return This builder.
      */
    public ibm.gse.eda.domain.events.VesselCourseEvent.Builder setBearing(int value) {
      validate(fields()[3], value);
      this.bearing = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'bearing' field has been set.
      * @return True if the 'bearing' field has been set, false otherwise.
      */
    public boolean hasBearing() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'bearing' field.
      * @return This builder.
      */
    public ibm.gse.eda.domain.events.VesselCourseEvent.Builder clearBearing() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * @return The value.
      */
    public java.lang.CharSequence getLongitude() {
      return longitude;
    }


    /**
      * Sets the value of the 'longitude' field.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public ibm.gse.eda.domain.events.VesselCourseEvent.Builder setLongitude(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.longitude = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'longitude' field.
      * @return This builder.
      */
    public ibm.gse.eda.domain.events.VesselCourseEvent.Builder clearLongitude() {
      longitude = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'lattitude' field.
      * @return The value.
      */
    public java.lang.CharSequence getLattitude() {
      return lattitude;
    }


    /**
      * Sets the value of the 'lattitude' field.
      * @param value The value of 'lattitude'.
      * @return This builder.
      */
    public ibm.gse.eda.domain.events.VesselCourseEvent.Builder setLattitude(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.lattitude = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'lattitude' field has been set.
      * @return True if the 'lattitude' field has been set, false otherwise.
      */
    public boolean hasLattitude() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'lattitude' field.
      * @return This builder.
      */
    public ibm.gse.eda.domain.events.VesselCourseEvent.Builder clearLattitude() {
      lattitude = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public int getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public ibm.gse.eda.domain.events.VesselCourseEvent.Builder setTimestamp(int value) {
      validate(fields()[6], value);
      this.timestamp = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public ibm.gse.eda.domain.events.VesselCourseEvent.Builder clearTimestamp() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public VesselCourseEvent build() {
      try {
        VesselCourseEvent record = new VesselCourseEvent();
        record.vessel_id = fieldSetFlags()[0] ? this.vessel_id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.status = fieldSetFlags()[1] ? this.status : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.speed = fieldSetFlags()[2] ? this.speed : (java.lang.Integer) defaultValue(fields()[2]);
        record.bearing = fieldSetFlags()[3] ? this.bearing : (java.lang.Integer) defaultValue(fields()[3]);
        record.longitude = fieldSetFlags()[4] ? this.longitude : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.lattitude = fieldSetFlags()[5] ? this.lattitude : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.timestamp = fieldSetFlags()[6] ? this.timestamp : (java.lang.Integer) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<VesselCourseEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<VesselCourseEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<VesselCourseEvent>
    READER$ = (org.apache.avro.io.DatumReader<VesselCourseEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.vessel_id);

    out.writeString(this.status);

    out.writeInt(this.speed);

    out.writeInt(this.bearing);

    out.writeString(this.longitude);

    out.writeString(this.lattitude);

    out.writeInt(this.timestamp);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.vessel_id = in.readString(this.vessel_id instanceof Utf8 ? (Utf8)this.vessel_id : null);

      this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);

      this.speed = in.readInt();

      this.bearing = in.readInt();

      this.longitude = in.readString(this.longitude instanceof Utf8 ? (Utf8)this.longitude : null);

      this.lattitude = in.readString(this.lattitude instanceof Utf8 ? (Utf8)this.lattitude : null);

      this.timestamp = in.readInt();

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.vessel_id = in.readString(this.vessel_id instanceof Utf8 ? (Utf8)this.vessel_id : null);
          break;

        case 1:
          this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
          break;

        case 2:
          this.speed = in.readInt();
          break;

        case 3:
          this.bearing = in.readInt();
          break;

        case 4:
          this.longitude = in.readString(this.longitude instanceof Utf8 ? (Utf8)this.longitude : null);
          break;

        case 5:
          this.lattitude = in.readString(this.lattitude instanceof Utf8 ? (Utf8)this.lattitude : null);
          break;

        case 6:
          this.timestamp = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










